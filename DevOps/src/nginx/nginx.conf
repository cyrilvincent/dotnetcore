events {
  worker_connections 1024;
}

http {
  upstream backend {
    server backend:8080;
  }

  upstream frontend {
    server frontend:3000;
  }

  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  charset utf-8;

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;
    
  gzip on;
  gzip_types text/plain application/xml text/css text/js application/javascript application/x-javascript;
  gzip_min_length 1024;
  gzip_comp_level 5;
  gzip_vary on;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  server {
    listen 80;
    listen [::]:80;

    server_name _;
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl;
    listen [::]:443 ssl http2;
    
    server_name localhost;
    root /usr/share/nginx/html;

    ssl_certificate /etc/ssl/certs/fullchain.pem;
    ssl_certificate_key /etc/ssl/certs/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "no-referrer-when-downgrade";

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    
    location / {
      proxy_pass http://frontend;
    }

    location /api {
      proxy_pass http://backend;
      rewrite ^/api/(.*)$ /api/$1 break;
    }
  
    location /swagger {
      proxy_pass http://backend;
      rewrite ^/swagger/(.*)$ /swagger/$1 break;
    }
  }
}
